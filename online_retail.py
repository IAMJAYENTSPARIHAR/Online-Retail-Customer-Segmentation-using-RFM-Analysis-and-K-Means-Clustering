# -*- coding: utf-8 -*-
"""Online Retail

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qsTuUn2XbO2dsvCepCBvhGVMunLt5DMr

# BY JAYANT SINGH PARIHAR

## Project - Online Retail

## Install Necessary Libraries
"""

# Install the required libraries if not installed
!pip install pandas matplotlib seaborn scikit-learn openpyxl

"""## Load the Dataset"""

import pandas as pd

# Load the Excel file
df = pd.read_excel("/content/Online Retail.xlsx")
df.head()  # Display the first few rows

"""## Data Cleaning"""

# Drop rows with missing CustomerID
df = df.dropna(subset=['CustomerID'])

# Remove rows with negative or zero Quantity and UnitPrice
df = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0)]

# Convert InvoiceDate to datetime format
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Check for missing or anomalous values
df.info()

"""## Feature Engineering (RFM Analysis)"""

import numpy as np

# Recency: Calculate the number of days since the last purchase
reference_date = df['InvoiceDate'].max()
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (reference_date - x.max()).days,  # Recency
    'InvoiceNo': 'count',  # Frequency
    'UnitPrice': lambda x: (x * df['Quantity']).sum()  # Monetary value calculated here
}).reset_index()

rfm.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']

"""## Normalize Data"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm[['Recency', 'Frequency', 'Monetary']])

"""## Apply K-Means Clustering"""

from sklearn.cluster import KMeans

# Elbow method to find optimal K
import matplotlib.pyplot as plt
inertia = []
K = range(1, 11)
for k in K:
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(rfm_scaled)
    inertia.append(kmeans.inertia_)

# Plot the Elbow Curve
plt.plot(K, inertia, 'bo-')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.show()

# Choose K based on elbow point
kmeans = KMeans(n_clusters=4)  # Example: 4 clusters
rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)

"""## Evaluate and Visualize Clusters"""

import seaborn as sns

# Boxplot of clusters by RFM features
sns.boxplot(x='Cluster', y='Recency', data=rfm)
sns.boxplot(x='Cluster', y='Frequency', data=rfm)
sns.boxplot(x='Cluster', y='Monetary', data=rfm)

# Plot cluster centroids
centroids = pd.DataFrame(kmeans.cluster_centers_, columns=['Recency', 'Frequency', 'Monetary'])
centroids.plot(kind='bar')

"""## Download the Results"""

!pip install google-colab
import pandas as pd
from google.colab import files

rfm.to_csv('clustered_customers.csv') # Saves the dataframe rfm to a csv file
files.download('clustered_customers.csv') # Downloads the file using the files object from google.colab